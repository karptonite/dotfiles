let g:snips_author="Daniel Karp"
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

source ~/dotfiles/bundles.vim
" scriptencoding utf-8
set background=dark
colorscheme solarized

" " handled by vim-sleuth now?
set tabstop=3
set softtabstop=3
set shiftwidth=3

let php_sql_query=1

let g:syntastic_always_populate_loc_list = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:EclimCompletionMethod = 'omnifunc'

let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let delimitMate_expand_space = 1
let delimitMate_expand_cr = 1
" let delimitMate_jump_expansion = 1

" Ultisnip/YCM both use tab? {{{1 "
" function! g:UltiSnips_Complete()
"     call UltiSnips#ExpandSnippet()
"     if g:ulti_expand_res == 0
"         if pumvisible()
"             return "\<C-n>"
"         else
"             call UltiSnips#JumpForwards()
"             if g:ulti_jump_forwards_res == 0
"                return "\<TAB>"
"             endif
"         endif
"     endif
"     return ""
" endfunction

" au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsListSnippets="<c-e>"
" " this mapping Enter key to <C-y> to chose the current highlight item 
" " and close the selection list, same as other IDEs.
" " CONFLICT with some plugins like tpope/Endwise
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" }}} "

set backupdir=~/vimtmp
set dir=~/vimtmp
set number
set relativenumber
set hlsearch
set cursorline
call togglebg#map("")
set guifont=Menlo\ Regular:h12
set hidden

cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

set smartcase
set ignorecase
set title
set wrap linebreak
set listchars=tab:>\ ,trail:-
set scrolloff=2
" Fix the & command in normal+visual modes {{{
nnoremap & :&&<Enter>
xnoremap & :&&<Enter>
" }}}

let mapleader = ","
noremap \ ,
nnoremap ' `
nnoremap ` '
set wildmode=list:longest
" tabularize both = an =>
nmap <leader>= :Tab /=[^>]<CR>
nmap <Leader>] :Tab /=><CR>
vmap <leader>= :Tab /=[^>]<CR>
vmap <Leader>] :Tab /=><CR>
nmap <silent> <leader>d <Plug>DashSearch
nmap <leader>v :tabedit $MYVIMRC<CR>
nmap <leader>c yi'f'a => self::<ESC>"0pviwUA
nmap <leader>a yi'A => $args['0']F$
"Align array
nmap <silent> <leader>l mlva(<9.gv:s/\s\+/ /g<CR>:nohlsearch<CR>gv:Align =><CR>gv='l
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
nnoremap <leader>u :GundoToggle<CR>
if has("autocmd")
	augroup BWCCreateDir
		autocmd!
		autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
	augroup END
	augroup mygroup
		autocmd!
		autocmd bufwritepost .vimrc source $MYVIMRC
		autocmd bufwritepost .vimrc AirlineRefresh
		"	autocmd BufRead,BufNewFile *.tpl set filetype=smarty
		autocmd FileType php set commentstring=//\ %s
		autocmd BufWritePost *.php EnableFastPHPFolds
		autocmd FileType php AlignCtrl g =>
	augroup END
endif

set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

let g:ctrlp_show_hidden = 1
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_files=30000 
" Folding settings
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
set wildignore+=*/pear/*,*/Zend/*,*/EbatNs/*,*/angular-1.1.x/*,*/documentation/*,*/vendor/*

nnoremap <silent> n   n:call HLNext(0.4)<cr>
nnoremap <silent> N   N:call HLNext(0.4)<cr>

function! HLNext (blinktime)
	let [bufnum, lnum, col, off] = getpos('.')
	highlight WhiteOnRed ctermfg=white ctermbg=red
	let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
	let target_pat = '\c\%#'.@/
	let ring = matchadd('WhiteOnRed', target_pat, 101)
	redraw
	exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
	call matchdelete(ring)
	redraw
endfunction

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%101v', 100)

" search .htaccess with Silver Searcher
let g:agprg="ag --column --hidden"
" Syntastic settings{{{
let g:syntastic_php_checkers = ['php']
"}}}
" Improved PHP Omnicompletion
let g:phpcomplete_relax_static_constraint = 1

" vim:ft=vim:foldmethod=marker
